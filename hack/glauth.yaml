apiVersion: v1
kind: Secret
metadata:
  name: kvdi-app-secrets
data:
  ldap-userdn: Y249a3ZkaS1zdmMsb3U9c3ZjYWNjdHMsZGM9a3ZkaSxkYz1pbw==
  ldap-password: bXlzZWNyZXQ=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: glauth-config
data:
  config.cfg: |
    #################
    # glauth.conf

    #################
    # General configuration.
    debug = true
    # syslog = true
    #
    # Enable hot-reload of configuration on changes
    # - does NOT work [ldap], [ldaps], [backend] or [api] sections
    watchconfig = true

    #################
    # Server configuration.
    #
    [ldap]
      enabled = true
      listen = "0.0.0.0:389"

    [ldaps]
      enabled = true
      listen = "0.0.0.0:636"
      cert = "/app/tls/tls.crt"
      key = "/app/tls/tls.key"

    #################
    # The backend section controls the data store.
    [backend]
      datastore = "config"
      baseDN = "dc=kvdi,dc=io"

      ## Configure dn format to use structures like
      ## "uid=serviceuser,cn=svcaccts,$BASEDN" instead of "cn=serviceuser,ou=svcaccts,$BASEDN"
      ## to help ease migrations from other LDAP systems
      # nameformat = "uid"
      # groupformat = "cn"

      ## Configure ssh-key attribute name, default is 'sshPublicKey'
      # sshkeyattr = "ipaSshPubKey"

    #################
    # The users section contains a hardcoded list of valid users.
    #   to create a passSHA256:   echo -n "mysecret" | openssl dgst -sha256
    [[users]]
      name = "kvdi-admin"
      mail = "admin@kvdi.com"
      unixid = 5001
      primarygroup = 5500
      otherGroups = [5501,5502]
      passsha256 = "6478579e37aff45f013e14eeb30b3cc56c72ccdc310123bcdf53e0333e3f416a" # dogood

    # This user record shows all of the possible fields available
    [[users]]
      name = "johndoe"
      givenname="John"
      sn="Doe"
      mail = "jdoe@kvdi.com"
      unixid = 5002
      primarygroup = 5500
      otherGroups = [5502]
      loginShell = "/bin/sh"
      passsha256 = "6478579e37aff45f013e14eeb30b3cc56c72ccdc310123bcdf53e0333e3f416a" # dogood
      disabled = true

    # Test user showing 2 factor auth authentication
    [[users]]
      name = "otpuser"
      unixid = 5003
      mail = "otp@kvdi.com"
      primarygroup = 5500
      otherGroups = [5502]
      passsha256 = "652c7dc687d98c9889304ed2e408c74b611e86a40caa51c4b43f1dd5913c5cd0" # mysecret
      otpsecret = "3hnvnk4ycv44glzigd6s25j4dougs3rk"

    [[users]]
      name = "kvdi-svc"
      unixid = 5004
      primarygroup = 5503
      passsha256 = "652c7dc687d98c9889304ed2e408c74b611e86a40caa51c4b43f1dd5913c5cd0" # mysecret


    #################
    # The groups section contains a hardcoded list of valid groups.
    [[groups]]
      name = "users"
      unixid = 5500

    [[groups]]
      name = "kvdi-admins"
      unixid = 5501

    [[groups]]
      name = "kvdi-users"
      unixid = 5502

    [[groups]]
      name = "svcaccts"
      unixid = 5503
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: glauth
  labels:
    app: glauth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: glauth
  template:
    metadata:
      labels:
        app: glauth
    spec:
      containers:
      - name: glauth
        image: glauth/glauth:v1.1.2
        ports:
        - name: ldap
          containerPort: 389
        - name: ldaps
          containerPort: 636
        volumeMounts:
        - name: config
          mountPath: /app/config
        - name: tls
          mountPath: /app/tls
      volumes:
      - name: config
        configMap:
          name: glauth-config
      - name: tls
        secret:
          secretName: glauth-tls
---
apiVersion: v1
kind: Service
metadata:
  name: glauth
spec:
  selector:
    app: glauth
  ports:
  - name: ldap
    protocol: TCP
    port: 389
    targetPort: 389
  - name: ldaps
    protocol: TCP
    port: 636
    targetPort: 636
---
apiVersion: v1
kind: Secret
metadata:
  name: glauth-tls
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZEakNDQXZhZ0F3SUJBZ0lVZjI1T2FtUlBwN08rdDVPM2c2MFAxR0t3ckE0d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0hqRWNNQm9HQTFVRUF3d1RWRVZUVkMxSlRsUkZVazFGUkVsQlZFVXRNVEFlRncweU1UQXhNREV3TlRRNApNRFphRncweU1qQXhNREV3TlRRNE1EWmFNQlF4RWpBUUJnTlZCQU1NQ1ZSRlUxUXRURVZCUmpDQ0FpSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQU55bG5jL2N3aGlLVTVUT1B3UGMwK2F1M3BVOERFeSsKclpySTN0YTJlL05jdStKUEVudjZrei9rK2NvRk9DS3NCT0JOL0k1UDJTYTlqYVZUR0FjdjVnSGpjeHQ1RzdTegpBc3doVkdkM0U0eXgxY1B6Z052MDVmN3hGWXlDaTlqS1B3TmxTR1dwaFkzNy9UWThOQXRsOXNNb3pld0JrNnE1CjJIenMxYTl1VXh0TzZlSVljdUZIaktvUnlRbjk1d3FNcnpWSjdIdk9WZm4yQmRMODRZZEN4azFZUXFHTmUycUQKNWRMdFl2SG9EUmM3a2NJaVk3c2R6OXNad3NRcnZueEw2QXA4aWdGRXB0azFSQnVTUzRVazd3R3JJT09LZDdjVgpvRnhQdVUyTU5vTWE2Zk1zWHNHS1A1cDRsUnZCbmpURm53ZmdKQ254WXVUTlIzSFFxdWZmNkpBbkdlNkh5UXV4CjkwbFIxU2t4eXQ4aHQxR05zWWpyNW9kZDArNWE0by85VURKSWlyKzlsbUpNL0k5WGtHaE5ZR1VodEQxNmViSVUKY0hhby91dkhFUXFtc2FSa0VhTTRURE5hSVhtdzFzd2JWME1UYWJiN1M1djJaRnZDc2VUT05wekhSaVVEVmZnKwpuWjFmam1kUE9ub1JQOG1XTkk0c2FPQ1JSVnVSTzlobXUyVGk0Szh3OFN2TlkwRUZtMEI3WG9UOTZxZDBwUExmCnRJTmpXNHNFengvMUkvZWpFQ3oxQjNQb1Z1SlVZVHRCbXgvYUNMQUdWVHlLa0RtWXpZUVhNYTFvblZBVU9UYloKcTRKemRCc0NjY2h5WnE3ejBDV0lyV0VHNW1KTzViVmlFdS83L2FySmxpVHVLRnhGWmh6YkU2aURHa2dodUJGaQprOW4yTVR0VG1wTHBBZ01CQUFHalRqQk1NQXNHQTFVZER3UUVBd0lGNERBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGCkJRY0RBVEFvQmdOVkhSRUVJVEFmZ2hKbmJHRjFkR2d1WkdWbVlYVnNkQzV6ZG1PQ0NXeHZZMkZzYUc5emREQU4KQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBZUE5bEs0aXhEVmVHMGxQNW5GVXdEaGZkTHhXZG11Vmd2TXdCWXU0RAp1QjdOTHdaZ1RFTnRGR2RkKzg2SDNTeGxFdXlYWnVnSjRpYVY2bXdmdFJkbFlBK0RKaTJJSzcxV3JzOWlqQVUxCmJLYjlvMEEzdkJJcFk5bHRqMDRrejNNdStrK21zWHNjSFFmMGFuZHoxQmNwa3N1WWFTTUxiMlhDdUdwREFMVkoKVTVCa25kTkVwQlNDVXN5UGUvekcxZThubDJpSmt3cGptbUxQcUVCWDRZRzhNSDluMTdpeG5RenZvNVFaU3c2bgprTys1aDJjRit1aytGYUZvd1lFMmRNRTlVeXNVU2Y0dUQ0dHQvZG9iN2kycmwrTmJ6Y09ranZHeXVFSi9pWldaCmFuZ3psdWo0OElDK1N3ekNZRkErNmdDYTdrelVJVEoxSExSN0VJelNQSEhtRTBZRkRSeEdKMXRXdGwreDhDcksKQTMvL0VVRW1mdFh2SXZyMHNUQjlYQVZkaDByYlNqaGlOeDdxZTVROGUzNTZSSEdVTTEzL09hRUNkVGhOWWIxZQo1c3VGRUxOQnNXTDlTYWpqbU5IZUxxT0FVWUJZTktWcVdwdUdPL292MjBJTlhOQ0FsR0t5OEF0Q3NCSGFMSEZyCmhOVmY2VElxRk9OUnlid0RqS3hTcVQvVlA4aUZpTjhic0h3U0pxL0l5Q0NKUFhpS2Y3TWFURDV0VUxLV2xtWG8KZ1ZweEtWRmpkYVBSck5PTlYyOWYrUkZ5NWJ4bTJoVGdNejNpQkhUVEhaQ1Uya3JSV3VEbEtMQW9HbCtMMWwrVQpMd1dlczl3WExzLytldGtqb0FNeWRNMWdwYiszYnBaMkluaExnV1gvNThxV0lrWkZPblozKzdzVVBmWnk4VVk1CjVIST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM0tXZHo5ekNHSXBUbE00L0E5elQ1cTdlbFR3TVRMNnRtc2plMXJaNzgxeTc0azhTCmUvcVRQK1Q1eWdVNElxd0U0RTM4amsvWkpyMk5wVk1ZQnkvbUFlTnpHM2tidExNQ3pDRlVaM2NUakxIVncvT0EKMi9UbC92RVZqSUtMMk1vL0EyVklaYW1GamZ2OU5qdzBDMlgyd3lqTjdBR1Rxcm5ZZk96VnIyNVRHMDdwNGhoeQo0VWVNcWhISkNmM25Db3l2TlVuc2U4NVYrZllGMHZ6aGgwTEdUVmhDb1kxN2FvUGwwdTFpOGVnTkZ6dVJ3aUpqCnV4M1AyeG5DeEN1K2ZFdm9DbnlLQVVTbTJUVkVHNUpMaFNUdkFhc2c0NHAzdHhXZ1hFKzVUWXcyZ3hycDh5eGUKd1lvL21uaVZHOEdlTk1XZkIrQWtLZkZpNU0xSGNkQ3E1OS9va0NjWjdvZkpDN0gzU1ZIVktUSEszeUczVVkyeAppT3ZtaDEzVDdscmlqLzFRTWtpS3Y3MldZa3o4ajFlUWFFMWdaU0cwUFhwNXNoUndkcWorNjhjUkNxYXhwR1FSCm96aE1NMW9oZWJEV3pCdFhReE5wdHZ0TG0vWmtXOEt4NU00Mm5NZEdKUU5WK0Q2ZG5WK09aMDg2ZWhFL3laWTAKaml4bzRKRkZXNUU3MkdhN1pPTGdyekR4SzgxalFRV2JRSHRlaFAzcXAzU2s4dCswZzJOYml3VFBIL1VqOTZNUQpMUFVIYytoVzRsUmhPMEdiSDlvSXNBWlZQSXFRT1pqTmhCY3hyV2lkVUJRNU50bXJnbk4wR3dKeHlISm1ydlBRCkpZaXRZUWJtWWs3bHRXSVM3L3Y5cXNtV0pPNG9YRVZtSE5zVHFJTWFTQ0c0RVdLVDJmWXhPMU9ha3VrQ0F3RUEKQVFLQ0FnRUFwTno2ZFgyMWFUQ3lFdFdvTC9Lb1FnMFhNdHFUTmlTakFxeGtGSHAxVXZsUFNXRmJwbGNyL3VuUAoyaXJjTHN2cE9OQU1qU2tNVCs0Q0VDMXVIckNqWTNYWFpBZXhzK3F0aEdqQzhDd0E1M2RaQ2ZpL3A1bnMzL2l5CjZUSUIzQklCMHoreVFJUFJ6cTBpSFl3T054WVFzdkdpSzExaVFJWnNRNnVTWG1wSW5uYndPb2VhRHNtdlNNUFIKT3k0RG05WlNjN2F3aERFLy9HemZIUzdtTkhLb1NOSlJ0dlJINnVaeXFvL0ZCb3NrZk45OW9WaWd2QWNpYjh0bgp3N3dMc0VQbk5TNm96eG5Fc1RjamxKWlM1MEVaZEYyeFRWTUE4RU93ZGtqN1kvNElIUjNYQUdOK3lZM0t5RmlnCjBRUnllV3ZQejhxaU90U3AxOXVxTGxpRDJvMXE3aWRtYUw5cCs5RmNXVkIrTE1GTWwxRlBld3JNTTFQNzRJWngKZGFiSkE4VzJkRnpSdmgvZldSb1o4UVBBeXlNcDF3SFBta1EvaXZYbUtUeDEvZWRvVUFRVHdkeGtTZWk5akZGcwpwZjhxWlBGSG1JdHgyb2xNdXEybEd3c1E5djBPL3EyTWpKejV3ZFhQZ1Q5aDJyTXdhN0NNRXVoTnRTNVJzWHAzCm1OM2NDYWFiRS9oYUx0MU10bklrWWxVOUFsNFpwM0phYVV1UlFNeG1MU0k2QVRlSzQ5Uno3bGhmTWZ5aFRkYXAKR1BTU1R6VDZSZExIRU4zNHN2VE84UUJCV0VNNTZaaVNEM3hGK3RNN1BKay9hTTBuL0J0L1Noay9LVkpXZFJDcAoxMVd5SW00NzNaOGRKMllGZnBXMTE2amkzUnpWcm9WMTNQV21kSHBnb0VEL1l4VDJSeUVDZ2dFQkFQWXRyVlZPClhEd0h4TGtxenFwNkJEMEhsR0FjNFlTVFdjS0h0aTBpbS91aEZ6Z0l2amYxa0R4UkJ0QW4xbFhTOCtsc05semIKdDVYcExjMXNtMEROblRjZEZ0R25YWFJUM0tFL0lVK0F6UlRMQXlHMjM2N0xVb0NQa0hGTjBZWUhCWnBHdEl0cApzeU02V0cxeVFGNUp3SG1QeDNoMmN0R2I0UGJLaVJEeGNIeGErdFdaeXZXeCtoTnpYWkhLd1FtTUl6QmpIekFBCi9tVFBjYkFEalk1ekU2RXlIRGpOVUxBZWthSlU0ZWowQnFKdXhsOHpnWGpsLzl6RTZzb3YrRi9TQWVMZXlLMm8KRnBTdGVrUVFTZVFZSWpzL3A1bUVIRzRVTnArTm5tTTc4Q1BEQmhMY2txUCtBT2F0VkkxYzd1NWtIUUcxbEhVMQp5RVFaak0rNi9ERzVPNk1DZ2dFQkFPVnpMUGRUc0hKcjdaYlQ4TGZ6QUNCLy92USt0NHZoOEdnNG4vRGN0dE5xCmRvUElWbFRBQS82V0pUWDRIUUl4QUdkTVJiOHJ1TGc5R0Q3U2RZS0NOUWtDanhPb21SZkpZdnRXRXJsL1M4czQKQWgwT2h6RGNIQ2MvR3ZMT3dYRzZGdXdIaXE4RFBMUG8rNjFnMEtJcnZsQkJNMUc1eFRnNEJuRFJkbXR2NGRFQgp5L0V1YmRValBKczVXVGZYNXhENjRUZWdFRDc3SWpTQy9GT29HdnRBbURBdjZIdTIzYUVjMjNUYSs0bmJXU01lCktDVFJrT1QyWFBBSVFYZzgrU1RRVVF1NkRiUXBpTnp5UFJ3aFdWclNqYnNMa0R6RFlya212WXJjUWUrMlc4NGIKL2ExdTJmc2VQbWNtSklxdnNDbm1lNjRKbzlpb0NuYW9BQnAxNUFURG9BTUNnZ0VBV1pPL1dhWWN5NzhyNXhEYgppSTdEa2cxN0FRb2hTV053cXVkRTgrRi9EcTNNVEJocVZ1Ums2bjIxVS9MYSsvbTV4VHNhQU9uMlFIZExzazhOCm95UHVUQXFxcmZrUGVXKzJmWG9DUGZLcExTSzk3ZnVrSXU5YkF1cTZiWEFhaUlGdm1YYVc1WSs5bmxqeHFrbUQKZ0l1bm5OUWppZ0xYdnN2UXJSeC9pWW5CRzQ3amJPdjhQVERZeFZFYVFCMmQ1a0oyMzNtQjlLNjM0cWpWUG0zYwppWFA0TlpTTlRtSHZOVmE2T1c1WGtiT1I0bk1hZmJPNUxldkxFV01aNkI1U2ExTjRXandrbTRQcFM0cGdUZm43CldTTXErWkl0QXlCZVUvUEkrSC9JbldWRytVeFNublJpYTRmV2ZobWVCWjVHVnJwWkQ3RXA1d2g5NmNHK1NpeEkKN2pMdnJ3S0NBUUEwcHhSM2dRWHBpK2pPaHI0amlDak1USEwyRzNwRktFamhzYlRLTWV2bVlmVG1VcyswelFkZApvWmpTWktoTGUzRXJReTV5S3hkTmQvK2JVdkpTUzR6ZUQyOUR4Sm0xQXFxcklGcFZwT2VBcjg2VVdtUWRpelVPCnNJVi9tSUI5bDRWeERsMzl3VkZwdTVvZGRDME1PZHVIVVI3MHJ4dVp4Z2w4VkNUSGpMb1dHMEp3aXdYN05nWFAKWFA2ak9QRTJUVXZuVnR6RGh4K1hTME9aOHVhV0o0R0U5VWwxTWtaemxVcXE2eUZ6eGhrVFhQVTdWYmZaUXN1YQo3Vm9RdkhVenhIWUVxZUpCS0pMV21PUDdFNUFNcm1xRnRLYVp1d0JwbW9FK1gwTG1Qa09jN1lGdURoVUpjaXhCCndWZjdWMHVtb2RSWjRLNXZwa2dZYUg3MWszNEt0ZFYvQW9JQkFRQ05Dc0xhRzM3TVZic2NtQ2VzZHU1Z1BwSXgKVFBXOUZmRWg5N05Hakg4eGlRTk1abHl1NHo4WDJNWmhjQTkwcTJJbXlTbzJIRXJ6NmUvUEgwSTFzc0tyZ2NLMAo5YTRoNVVBR1hybi9aNUFNdHZxVzVDOGZUK3F1dVR6QVp2SlZiN1IzTy9McEIxTWlSalRkQWg4L0c0YjZJdng3Ck13UGpVS1IrWU5wY0V5US95aDBzR1VkZE9DQjhWTElsYVBpSzFsSmpIZ0xzZ2t3RUNETTBZOUV4NmJIR0krUk8KODlYZXNMckpyWDJ0Z3JvK3Qya0tTS3VQWnp6d1F1Ym8zTkFzR2Z6SUJoV0crMDNFeGtOejNJZUpHUUhQYnBQMgpPcmJGUzFDbnczejhqQVJVSXdrdFBYTGI0OFVVamtLakMwcHVjU0VMN0xtaDJBZCt1dENINVllOGVkNXIKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZJekNDQXd1Z0F3SUJBZ0lVT1NqWFZHTndUc2U5aDVHaDAzOWtJb1o0T0swd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0VqRVFNQTRHQTFVRUF3d0hWRVZUVkMxRFFUQWVGdzB5TVRBeE1ERXdOVFE0TURWYUZ3MHlNakF4TURFdwpOVFE0TURWYU1CNHhIREFhQmdOVkJBTU1FMVJGVTFRdFNVNVVSVkpOUlVSSlFWUkZMVEV3Z2dJaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUURNSFNVNWNTbFpVVGpOZ2s5UE9NajdWT3ljVHRmWEZQUXIKelZBZGtNWXpOVWI3Y3Y0RjFlSnZ6N3FHWXhxOXU2cHYrVUsxbVF5bVYxT21ocy9UeEZidktDcERZQUVVcW9ldAoyZDlOYmx4WFNoTk9sL2gzVkM3Q3hnUm1idjJyZzVrSk1kVzBQRUh4cEgvaEdVK0EwWHBwSGp0RG9GWXNYRTdDClhGbEZVT1l4cWlsdFIySTVzQXh6dHlqUlZvVVprVWkrTUdHWk92S0FjdVE5NjY5US9kQ3lsRkxqSUhVdjAzd0MKd0FkUjdDTzZDVHNWRDdQVmorcUlhcG1reXJieElCcERrbmFRV0lRYlJUdnQ5UllyaEduNkY3YjN2YXZwQ20rNgpxUlU2VmQ1My9DQ3JVY2NCVDBhcVd3Qi9mSVJVNG03eWZCY0l6TGdRL1NaMXp4Z05odTRvbmM5a2MzcTBVVDc2ClkxUnhZYWpBREM1YVJkWmQzSGxtQy9FWEtWbzZ3VGtSVEx2WXJycjByVGNJL0ttMXhVbk5QZWFBem5LV0VqaUEKUkVyRk1YQVQ5eWZCeDQ2dVI2WGRTWFlqdjhJZ0QzeEhYd1VJRlVWQU0xeEVWNHdmazhxUXFObHlMTUpGVHo3ZQpiZ0Y3RWlPeVFPbVlxMzRzeXRicXRTTVRicE0wcS9yVjRHdUF2UlBZdldhdEhHUFBWRzdKdGRDTXFpSXlmSGJ4Cm5mcGpVeEk1bUx1RnBBcVFZUE4xM241b05keTc3Q2c4RzcrRHZTbnorQVpDdUJFZGpIbFYzNWI4WmgwT2crWlgKQVk4b3pRb1dqT29Cem10VDZrV3g5YUE3c3JKa0dxSlNHcDhMU29qZ2ZmSlEwTEpQOTNzYkRoeTFyUjltcmZsagp4YThVTGZoWm93SURBUUFCbzJVd1l6QVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRURNQTRHQTFVZER3RUIvd1FFCkF3SUJoakFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQVRBb0JnTlZIUkVFSVRBZmdoSm5iR0YxZEdndVpHVm0KWVhWc2RDNXpkbU9DQ1d4dlkyRnNhRzl6ZERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQURjNlBxSVhsQjFDdAo4cnM1MTZOQ0pjNDhtUi9sMnUzQkhhbE1mZ0JtRFVCZmZnQnZDRXBPLzJrZDQxQVRRNzY2OXl3WkZaT2EzeWlTCkFoVXo4eEc5Wks1UHhRemZ5UDErOGpBbHdsREMzTzhZRFhUcVhGdnNlWlNremVIQVIwdXN0NXFFUUhqVXIxazkKK21wbnhjcmNscHZjMGpLeGV5dWR4N1pNaTBQWFdxNFdXYzFJcmRSbWh2dWFEZ1RsK0NqUkdZQ2dIb0ROSjIrKwpHRCtGbllpVEdLY3pYRVA5dWZtVG5iK1FBL2VTeDdrVmZnazdncjkrR1JoLzZyYTEzcGU5OGROb2tWbEN2aHdpClV5VTdYd0RHRk9VbjN2RkRqN2xtclJRR0VrQ2JieGc5aGt2WElaTlJHbDYrMGRQVTlqOVRVMGpIa2ZaN2FEQWcKVG9oUENpWlJqQXNQeDRmOGtUdFJxb1YydWczK1JGRzFteVJ1Mkt6K3ZFZUFGU0h5OG9aeTlMUUFBZzdQS29sWQpHa3BwNDBzbzJYTXFDSWZxY1d0blBVWUtzTzNQYldwODdadlhreVdLSk13WVlBUHJkMkpPeE93NlZEbWZEM3FNCmlyVkEvM1lkRFdKVEd0ZW9OOFBTMTlUSGRWL1A2NlBwMXlRMFIyRkd3Wkx0R3Q2eVQzN3V4NjA5akh3THlRUHoKaUpYbldISzFmc0cxQXc3bnhva3k5dlprc3gvNG1adWVIVEh6TEkxVGVQSW1uS3ZxZG5hdVhJVTdBa09McHRiWgpialVFODlXTGNvOUM4Z2FtS1NzNGpiT3J2OXBJT1lGUFBOS1h0azgvRldkRVF0WU5jaEFZVTJoTzM3bmFhWjlrCjRFRGpxcnJLbmlmb1JubVhjSEM3WmF6bWtkQlFNZE09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGRENDQXZ5Z0F3SUJBZ0lVSWxYM2hVVmgzaHlmSG5TdjJYdnFsZi9aLzhRd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0VqRVFNQTRHQTFVRUF3d0hWRVZUVkMxRFFUQWVGdzB5TVRBeE1ERXdOVFE0TURSYUZ3MHpNREV5TXpBdwpOVFE0TURSYU1CSXhFREFPQmdOVkJBTU1CMVJGVTFRdFEwRXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDCkR3QXdnZ0lLQW9JQ0FRQ2F5TFBxckFFNlE0eVAzd3ZqQmFSbm9kY3BFbEx4NHV0SGtUQU9QeVBSclEyUjNqT28KZU96bmt2KzJLUDgrZi9zalh5akN4cXloVDljSGNUUytvTVhyU2o5em40Q21Hck4rS2xRTC8raXgxZW1DNnlUbgpDRmJZdTdQUVRCYkJnRkRQcC80TGlFVkhEbU1Ga2hYRThnYXl6bHNRZEo0dkwxdHcvMDQ2c0l0NWtEMEczL1drCjZ2VFJ2RjJ2dzdHVW9sUnVoQkprVFk1Ky9KQzErL0tQbGRSWEJsUGhLczFiaU1SRHl1RUlybWJ1Q3lyQU9XVEsKNDZJYXM1UUQzY0k3SDlCbWFTbzF2UFVZSk5kdFNmY21jMnE5QXg1a09CVUVRTWgxdExYUGRnNUFRcFRlU0JkcgpDY2lyaEx1eVl3VHdIdW5tYWh4MWtDdjVNdWRidVRUVnNmVnV3Qk53UnJDdWlEbzVSYnlHLyttY1ByK2tNWkNxCmdUa2ErR2o4SVFNSWtES0ErNWxiL3RCOHdLN3FzLzg4czBKUloxUWMxSHY4OFpUMkdPNWZ1cnVtdjhwVHM0bDEKWlhJdzZ2dlNGU1BGREhwUzRGQUtNajBWZFpkNnEvWnFGbWpWNlBRelZGa1JFSFdtTWl4aEpoM0s1RWgxcWxPRAozNEVHRFYxYjlPczhCUXc3VzYzb016VlBlVTFTOU1MNnh2eXVWbEw4RXhWTVFxRTkwL2M4ZGxKajJFdHpKZmljClJiL1NZWkg1Rmk0dU9yejVVd3ZyNC96UzlmR3Nmc3M4U09YeXJIY3AvRXY0c1RNUWF6ZXNuWFhCSTBQT1hCZ3oKSTFMUEFRc01BYW56ODMwQndqaXp5STRjUzlGUmpOUmZhTm5iVlJGS2pWWUE4Vk16RHdXVHhJSFRBd0lEQVFBQgpvMkl3WURBT0JnTlZIUThCQWY4RUJBTUNBWVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFUQmdOVkhTVUVEREFLCkJnZ3JCZ0VGQlFjREFUQW9CZ05WSFJFRUlUQWZnaEpuYkdGMWRHZ3VaR1ZtWVhWc2RDNXpkbU9DQ1d4dlkyRnMKYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFPQU04bWF0Q2drVnRhMXhxcWtTc3dJQ0R3dU9UUWVEKwpYNzJ5MlQ2OEFsN2hVbm4wcXc2alNmUGtqWVpiYXB2MEdMY0ZJcHhoQ0MvLzYyUWljc1VpcXY3amZidm5qMUtGCnhqTElpQU1SWWFiM2tXaytuVDNlSWhmTkRhZ3VWMk9GR2Vqck9RaDBsZEVNU3BweTZBdWNNNE92RVJNY1lVQzEKTmJNeHAzNTJkWmN0cUkrWjRjL2V1eUtsSlkwQlpHMGVhWm52UFVmd1lyV0plUWdIY0xxRDViMENYMlplcWxFZgpWTkFEMGdFeU5JSm9iTjhYdFFRQ3k3ZG1remdTWlN4bkJmcVVFQm9zZTVSdk9UN3lYUXRlWVlZZHhRVDdxNm9UCndIZ1MzbnV1cUVCbWtIUVM5RmdDU0RUUjZ0dVVUUHk5YTQ4Z1o5RSt6SDZnUlRKQTBaSStPNUhSZm1mYnJoK2UKZis3UEErUHFhNm1icU4yZ1FRaTVzbDNsWEdYdCswcXlTV29ETHVCZjdZYzk5ZURrNzQ4aENCWTE1VDQrUGVaTApCMzNyWlBTQy9qWEs3bnJkWDhtNWtPVzJSM2lsMUVLdC9vdW1mZmZWU2lqb0lhNS9XZzNtTk9jTm52ekJQSDlqClJaUjhlVHBaZDZJRzg1am9nNFdqcFNyMnJTZWpJZlZtYmdwTHp0UWZFUkdHcCthaXdBUlNqRnY2Qi9iV2JuV0MKc1V5cWF0VEpPVk12VFZqVGdqS2RVdmJiUjNHb0tSYVVuSmZkQkVicmh1TmNNak9TeUxPUTZKaG43WnJHNTNvZApaVGhwWnJoV3FvUURHSXZrWEZ4V2dtblJzSXJEam04OHFlaVVvM1R1VjU1UmU4YU9GKzNtTXhVYURIUXAyL2htCjEwanRZMDkxVUVBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
