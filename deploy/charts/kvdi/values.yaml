# Default values for kVDI.

# nameOverride -- A name override for resources created by the chart.
nameOverride: ""
# fullnameOverride -- A full name override for resources created by the chart.
fullnameOverride: ""

rbac:
  serviceAccount:
    # rbac.serviceAccount.create -- Specifies whether a `ServiceAccount` should be created.
    create: true
    # rbac.serviceAccount.name -- The name of the `ServiceAccount` to use.
    # @default -- If not set and create is true, a name is generated using the fullname template.
    name:
  # rbac.pspEnabled -- Specifies whether to create `PodSecurityPolicies` for the manager to use when booting desktops.
  pspEnabled: false

manager:
  # manager.replicaCount -- The number of manager replicas to run.
  # If more than one is set, they will run in active/standby mode.
  replicaCount: 1
  image:
    # manager.image.repository -- The repository to pull the manager image from.
    # The tag is assumed to be `manager-<chart_version>`.
    repository: quay.io/tinyzimmer/kvdi
    # manager.image.pullPolicy -- The `ImagePullPolicy` to use for the manager pod.
    pullPolicy: IfNotPresent
  # manager.imagePullSecrets -- Image pull secrets for the manager pod.
  imagePullSecrets: []
  # manager.podSecurityContext -- The `PodSecurityContext` for the manager pod.
  podSecurityContext: {}
  # manager.securityContext -- The container security context for the manager pod.
  securityContext: {}
  # manager.resources -- Resource limits for the manager pod.
  resources: {}
  # manager.nodeSelector -- Node selectors for the manager pod.
  nodeSelector: {}
  # manager.tolerations -- Node tolerations for the manager pod.
  tolerations: []
  # manager.affinity -- Node affinity for the manager pod.
  affinity: {}

vdi:
  # vdi.spec -- The `VDICluster` spec.
  # @default -- The values described below are the same as the `VDICluster` CRD defaults.
  spec:
    # vdi.spec.appNamespace -- The namespace where the `kvdi` app will run.
    # This is different than the chart namespace. The chart lays down the manager
    # and a VDI configuration, and the manager takes care of the rest.
    appNamespace: default
    # vdi.spec.imagePullSecrets -- Image pull secrets to use for app containers.
    imagePullSecrets: []
    # vdi.spec.certManagerNamespace -- The namespace where `cert-manager` is running.
    certManagerNamespace: cert-manager
    # vdi.spec.userdataSpec -- If configured, enables userdata persistence with
    # the given PVC spec. Every user will receive their own PV with the provided configuration.
    userdataSpec: {}
    # vdi.spec.app -- App level configurations for `kVDI`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    app:
      # vdi.spec.app.image -- The image to use for app pods.
      # @default -- `quay.io/tinyzimmer/kvdi:app-${VERSION}`
      image: ""
      # vdi.spec.app.corsEnabled -- Enables CORS headers in API responses.
      corsEnabled: false
      # vdi.spec.app.auditLog -- Enables a detailed audit log of API events.
      # At the moment, these just get logged to stdout on the app instance.
      auditLog: false
      # vdi.spec.app.replicas -- The number of app replicas to run.
      replicas: 1
      # vdi.spec.app.resources -- Resource limits for the app pods.
      resources: {}
    # vdi.spec.auth -- Authentication configurations for `kVDI`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    auth:
      # vdi.spec.auth.allowAnonymous -- Allow anonymous users to launch and use desktops.
      allowAnonymous: false
      # vdi.spec.auth.adminSecret -- The secret to store the generated admin password in.
      adminSecret: kvdi-admin-secret
      # vdi.spec.auth.localAuth -- Use local-auth for the authentication backend.
      # This is currently the only supported auth provider, however more may come in the future.
      localAuth: {}
      # # vdi.spec.auth.ldapAuth -- Use an LDAP server for the authentication backend.
      # ldapAuth:
      #   # vdi.spec.auth.ldapAuth.url -- The URL for connecting to ldap.
      #   url: "ldap://glauth.default.svc:389"
      #   # vdi.spec.auth.ldapAuth.tlsInsecureSkipVerify -- Set to true to skip ldap server certificate validation.
      #   tlsInsecureSkipVerify: false
      #   # vdi.spec.auth.ldapAuth.tlsCACert -- A base64 encoded CA certificate for LDAP if required for TLS verification.
      #   tlsCACert: Cg==
      #   # vdi.spec.auth.ldapAuth.bindUserDNSecretKey --
      #   bindUserDNSecretKey: "ldap-userdn"
      #   # vdi.spec.auth.ldapAuth.bindPasswordSecretKey --
      #   bindPasswordSecretKey: "ldap-password"
      #   # vdi.spec.auth.ldapAuth.bindCredentialsSecret --
      #   bindCredentialsSecret: ""
      #   # vdi.spec.auth.ldapAuth.adminGroups --
      #   adminGroups: ["cn=kvdi-admins,ou=groups,dc=kvdi,dc=io"]
      #   # vdi.spec.auth.ldapAuth.userSearchBase --
      #   userSearchBase: "ou=users,dc=kvdi,dc=io"
    # vdi.spec.secrets -- Secret storage configurations for `kVDI`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    secrets:
      # vdi.spec.secrets.k8sSecret -- Use the Kubernetes secret storage backend. This is the default
      # if no other configuration is provided. For now, see the API reference for what to
      # use in place of these values if using a different backend.
      k8sSecret:
        # vdi.spec.secrets.k8sSecret.secretName -- The name of the Kubernetes `Secret`.
        # backing the secret storage.
        secretName: kvdi-app-secrets

  # vdi.templates -- Not implemented in the chart yet. This will be a place
  # to preload desktop-templates into the cluster.
  templates: []
